#Function creates a list of 4 methods to be used later for any input x/Matrix.
makeCacheMatrix <- function(x = matrix()) {
#First we set m to be null to restart the process to be used later
m <- NULL
#This function is used in future cases to avoid having to reassign the function list to another variable
#Values are assigned in the parent environment via <<- operator
set <- function(y){
x <<- y
m <<- NULL
}
#Simply returns the matrix - 2
get <- function() x
#Assign the argument to m and makes this available in the parent environment - 3
setmatrix <- function(solve) m <<- solve
#Returns the value for m - 1
getmatrix <-function() m
#List of defined functions defined above
list(set = set, get = get, setmatrix = setmatrix, getmatrix = getmatrix)
}
#Function takes makeCacheMatrix function that contains the list of defined functions to be called when executed
cacheSolve <- function(x = matrix(), ...) {
#First m is set to the existing value - 1
#from above 1 simply returns the value of m
m <- x$getmatrix()
#If m is not null then its value is currently stored and is returned
if (!is.null(m) && !identical(x$get(), m)) {
message("getting cached data")
return(m)
}
#Set the matrix to calculate a new solution/solve - 2
#2 returns the value of x
matrix <- x$get()
#Calculate a new solution/solve based on the matrix
m <- solve(matrix, ...)
#Set this new value for the solution/solve to m - 3
#m is the new calculated solution/solve, it takes this value and sets it to m
x$setmatrix(m)
#Displays the value of m
m
}
mat <- matrix(1:4, 2, 2)
cacheSolve(mat)
mat <- matrix(c(1,2,3,4), nrow = 2, ncol = 2)
mat <- makeCacheMatrix(data = (c(1,2,3,4), nrow = 2, ncol = 2)
mat <- matrix(data = c(1,2,3,4), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
cacheSolve(mat2)
cacheSolve(mat2)
cacheSolve(mat2)
mat2$get
mat2$get()
mat2$get()$m
mat2$get$m
mat2$getmatrix$m
## Put comments here that give an overall description of what your
## functions do
## Function creates a list of 4 methods to be used as a parameter for the cacheSolve function
makeCacheMatrix <- function(x = matrix()) {
#First we set m to be null to restart the process to be used later
m <- NULL
#This function is used in future cases to avoid having to reassign the function list to another variable
#Values are assigned in the parent environment via <<- operator
set <- function(y){
x <<- y
m <<- NULL
}
#Simply returns the matrix - (2)
get <- function() x
#Assign the argument to m and makes this available in the parent environment - (3)
setmatrix <- function(solve) m <<- solve
#Returns the value for m - (1)
getmatrix <-function() m
#List of defined functions defined above
list(set = set, get = get, setmatrix = setmatrix, getmatrix = getmatrix)
}
#Function takes makeCacheMatrix function that contains the list of defined functions
cacheSolve <- function(x, ...) {
#First m is set to the existing value - (1)
#from above 1 simply returns the value of m
m <- x$getmatrix()
#If m is not null then its value is currently stored and is returned
if (!is.null(m)) {
message("getting cached data")
return(m)
}
#Set the matrix to calculate a new solution/solve - (2)
#2 returns the value of x
matrix <- x$get()
#Calculate a new solution/solve based on the matrix
m <- solve(matrix, ...)
#Set this new value for the solution/solve to m - (3)
#m is the new calculated solution/solve, it takes this value and sets it to m
x$setmatrix(m)
#Displays the value of m
m
}
mat <- matrix(data = c(1,2,3,4), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
cacheSolve(mat2)
a1 <- matrix(c(4,2,7,6), nrow = 2, ncol =2)
test <- mat2$set(a1)
cacheSolve(a1)
test <- mat2$set(makeCacheMatrix(a1)
)
cacheSolve(a1)
